// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: geobuf.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct DataMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// global arrays of unique keys
  var keys: [String] = []

  /// max coordinate dimensions
  var dimensions: UInt32 {
    get {return _dimensions ?? 2}
    set {_dimensions = newValue}
  }
  /// Returns true if `dimensions` has been explicitly set.
  var hasDimensions: Bool {return self._dimensions != nil}
  /// Clears the value of `dimensions`. Subsequent reads from it will return its default value.
  mutating func clearDimensions() {self._dimensions = nil}

  /// number of digits after decimal point for coordinates
  var precision: UInt32 {
    get {return _precision ?? 6}
    set {_precision = newValue}
  }
  /// Returns true if `precision` has been explicitly set.
  var hasPrecision: Bool {return self._precision != nil}
  /// Clears the value of `precision`. Subsequent reads from it will return its default value.
  mutating func clearPrecision() {self._precision = nil}

  var dataType: DataMessage.OneOf_DataType? = nil

  var featureCollection: DataMessage.FeatureCollection {
    get {
      if case .featureCollection(let v)? = dataType {return v}
      return DataMessage.FeatureCollection()
    }
    set {dataType = .featureCollection(newValue)}
  }

  var feature: DataMessage.Feature {
    get {
      if case .feature(let v)? = dataType {return v}
      return DataMessage.Feature()
    }
    set {dataType = .feature(newValue)}
  }

  var geometry: DataMessage.Geometry {
    get {
      if case .geometry(let v)? = dataType {return v}
      return DataMessage.Geometry()
    }
    set {dataType = .geometry(newValue)}
  }

	public var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_DataType: Equatable, Sendable {
    case featureCollection(DataMessage.FeatureCollection)
    case feature(DataMessage.Feature)
    case geometry(DataMessage.Geometry)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .featureCollection: return {
        guard case .featureCollection(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .feature: return {
        guard case .feature(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .geometry: return {
        guard case .geometry(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      }
    }

  }

  struct Feature: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var geometry: DataMessage.Geometry {
      get {return _geometry ?? DataMessage.Geometry()}
      set {_geometry = newValue}
    }
    /// Returns true if `geometry` has been explicitly set.
    var hasGeometry: Bool {return self._geometry != nil}
    /// Clears the value of `geometry`. Subsequent reads from it will return its default value.
    mutating func clearGeometry() {self._geometry = nil}

    var idType: DataMessage.Feature.OneOf_IDType? = nil

    var id: String {
      get {
        if case .id(let v)? = idType {return v}
        return String()
      }
      set {idType = .id(newValue)}
    }

    var intID: Int64 {
      get {
        if case .intID(let v)? = idType {return v}
        return 0
      }
      set {idType = .intID(newValue)}
    }

    /// unique values
    var values: [DataMessage.Value] = []

    /// pairs of key/value indexes
    var properties: [UInt32] = []

    /// arbitrary properties
    var customProperties: [UInt32] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_IDType: Equatable, Sendable {
      case id(String)
      case intID(Int64)

    }

    init() {}

    fileprivate var _geometry: DataMessage.Geometry? = nil
  }

  struct Geometry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: DataMessage.Geometry.TypeEnum {
      get {return _type ?? .point}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    /// coordinate structure in lengths
    var lengths: [UInt32] = []

    /// delta-encoded integer values
    var coords: [Int64] = []

    var geometries: [DataMessage.Geometry] = []

    var values: [DataMessage.Value] = []

    var customProperties: [UInt32] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum TypeEnum: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
      case point = 0
      case multipoint = 1
      case linestring = 2
      case multilinestring = 3
      case polygon = 4
      case multipolygon = 5
      case geometrycollection = 6

      init() {
        self = .point
      }

    }

    init() {}

    fileprivate var _type: DataMessage.Geometry.TypeEnum? = nil
  }

  struct FeatureCollection: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var features: [DataMessage.Feature] = []

    var values: [DataMessage.Value] = []

    var customProperties: [UInt32] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Value: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var valueType: DataMessage.Value.OneOf_ValueType? = nil

    var stringValue: String {
      get {
        if case .stringValue(let v)? = valueType {return v}
        return String()
      }
      set {valueType = .stringValue(newValue)}
    }

    var doubleValue: Double {
      get {
        if case .doubleValue(let v)? = valueType {return v}
        return 0
      }
      set {valueType = .doubleValue(newValue)}
    }

    var posIntValue: UInt64 {
      get {
        if case .posIntValue(let v)? = valueType {return v}
        return 0
      }
      set {valueType = .posIntValue(newValue)}
    }

    var negIntValue: UInt64 {
      get {
        if case .negIntValue(let v)? = valueType {return v}
        return 0
      }
      set {valueType = .negIntValue(newValue)}
    }

    var boolValue: Bool {
      get {
        if case .boolValue(let v)? = valueType {return v}
        return false
      }
      set {valueType = .boolValue(newValue)}
    }

    var jsonValue: String {
      get {
        if case .jsonValue(let v)? = valueType {return v}
        return String()
      }
      set {valueType = .jsonValue(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_ValueType: Equatable, Sendable {
      case stringValue(String)
      case doubleValue(Double)
      case posIntValue(UInt64)
      case negIntValue(UInt64)
      case boolValue(Bool)
      case jsonValue(String)

    }

    init() {}
  }

  public init() {}

  fileprivate var _dimensions: UInt32? = nil
  fileprivate var _precision: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keys"),
    2: .same(proto: "dimensions"),
    3: .same(proto: "precision"),
    4: .standard(proto: "feature_collection"),
    5: .same(proto: "feature"),
    6: .same(proto: "geometry"),
  ]

  public var isInitialized: Bool {
    if let v = self.dataType, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.keys) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._dimensions) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._precision) }()
      case 4: try {
        var v: DataMessage.FeatureCollection?
        var hadOneofValue = false
        if let current = self.dataType {
          hadOneofValue = true
          if case .featureCollection(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.dataType = .featureCollection(v)
        }
      }()
      case 5: try {
        var v: DataMessage.Feature?
        var hadOneofValue = false
        if let current = self.dataType {
          hadOneofValue = true
          if case .feature(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.dataType = .feature(v)
        }
      }()
      case 6: try {
        var v: DataMessage.Geometry?
        var hadOneofValue = false
        if let current = self.dataType {
          hadOneofValue = true
          if case .geometry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.dataType = .geometry(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.keys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keys, fieldNumber: 1)
    }
    try { if let v = self._dimensions {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._precision {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    switch self.dataType {
    case .featureCollection?: try {
      guard case .featureCollection(let v)? = self.dataType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .feature?: try {
      guard case .feature(let v)? = self.dataType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .geometry?: try {
      guard case .geometry(let v)? = self.dataType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DataMessage, rhs: DataMessage) -> Bool {
    if lhs.keys != rhs.keys {return false}
    if lhs._dimensions != rhs._dimensions {return false}
    if lhs._precision != rhs._precision {return false}
    if lhs.dataType != rhs.dataType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage.Feature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DataMessage.protoMessageName + ".Feature"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "geometry"),
    11: .same(proto: "id"),
    12: .standard(proto: "int_id"),
    13: .same(proto: "values"),
    14: .same(proto: "properties"),
    15: .standard(proto: "custom_properties"),
  ]

  public var isInitialized: Bool {
    if self._geometry == nil {return false}
    if let v = self._geometry, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._geometry) }()
      case 11: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.idType != nil {try decoder.handleConflictingOneOf()}
          self.idType = .id(v)
        }
      }()
      case 12: try {
        var v: Int64?
        try decoder.decodeSingularSInt64Field(value: &v)
        if let v = v {
          if self.idType != nil {try decoder.handleConflictingOneOf()}
          self.idType = .intID(v)
        }
      }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      case 14: try { try decoder.decodeRepeatedUInt32Field(value: &self.properties) }()
      case 15: try { try decoder.decodeRepeatedUInt32Field(value: &self.customProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._geometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.idType {
    case .id?: try {
      guard case .id(let v)? = self.idType else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    }()
    case .intID?: try {
      guard case .intID(let v)? = self.idType else { preconditionFailure() }
      try visitor.visitSingularSInt64Field(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 13)
    }
    if !self.properties.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.properties, fieldNumber: 14)
    }
    if !self.customProperties.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.customProperties, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage.Feature, rhs: DataMessage.Feature) -> Bool {
    if lhs._geometry != rhs._geometry {return false}
    if lhs.idType != rhs.idType {return false}
    if lhs.values != rhs.values {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.customProperties != rhs.customProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage.Geometry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DataMessage.protoMessageName + ".Geometry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "lengths"),
    3: .same(proto: "coords"),
    4: .same(proto: "geometries"),
    13: .same(proto: "values"),
    15: .standard(proto: "custom_properties"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.geometries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeRepeatedUInt32Field(value: &self.lengths) }()
      case 3: try { try decoder.decodeRepeatedSInt64Field(value: &self.coords) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.geometries) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      case 15: try { try decoder.decodeRepeatedUInt32Field(value: &self.customProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.lengths.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.lengths, fieldNumber: 2)
    }
    if !self.coords.isEmpty {
      try visitor.visitPackedSInt64Field(value: self.coords, fieldNumber: 3)
    }
    if !self.geometries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.geometries, fieldNumber: 4)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 13)
    }
    if !self.customProperties.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.customProperties, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage.Geometry, rhs: DataMessage.Geometry) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.lengths != rhs.lengths {return false}
    if lhs.coords != rhs.coords {return false}
    if lhs.geometries != rhs.geometries {return false}
    if lhs.values != rhs.values {return false}
    if lhs.customProperties != rhs.customProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage.Geometry.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POINT"),
    1: .same(proto: "MULTIPOINT"),
    2: .same(proto: "LINESTRING"),
    3: .same(proto: "MULTILINESTRING"),
    4: .same(proto: "POLYGON"),
    5: .same(proto: "MULTIPOLYGON"),
    6: .same(proto: "GEOMETRYCOLLECTION"),
  ]
}

extension DataMessage.FeatureCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DataMessage.protoMessageName + ".FeatureCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "features"),
    13: .same(proto: "values"),
    15: .standard(proto: "custom_properties"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.features) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.features) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      case 15: try { try decoder.decodeRepeatedUInt32Field(value: &self.customProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.features.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.features, fieldNumber: 1)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 13)
    }
    if !self.customProperties.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.customProperties, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage.FeatureCollection, rhs: DataMessage.FeatureCollection) -> Bool {
    if lhs.features != rhs.features {return false}
    if lhs.values != rhs.values {return false}
    if lhs.customProperties != rhs.customProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage.Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DataMessage.protoMessageName + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "string_value"),
    2: .standard(proto: "double_value"),
    3: .standard(proto: "pos_int_value"),
    4: .standard(proto: "neg_int_value"),
    5: .standard(proto: "bool_value"),
    6: .standard(proto: "json_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.valueType != nil {try decoder.handleConflictingOneOf()}
          self.valueType = .stringValue(v)
        }
      }()
      case 2: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.valueType != nil {try decoder.handleConflictingOneOf()}
          self.valueType = .doubleValue(v)
        }
      }()
      case 3: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.valueType != nil {try decoder.handleConflictingOneOf()}
          self.valueType = .posIntValue(v)
        }
      }()
      case 4: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.valueType != nil {try decoder.handleConflictingOneOf()}
          self.valueType = .negIntValue(v)
        }
      }()
      case 5: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.valueType != nil {try decoder.handleConflictingOneOf()}
          self.valueType = .boolValue(v)
        }
      }()
      case 6: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.valueType != nil {try decoder.handleConflictingOneOf()}
          self.valueType = .jsonValue(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.valueType {
    case .stringValue?: try {
      guard case .stringValue(let v)? = self.valueType else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .doubleValue?: try {
      guard case .doubleValue(let v)? = self.valueType else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }()
    case .posIntValue?: try {
      guard case .posIntValue(let v)? = self.valueType else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }()
    case .negIntValue?: try {
      guard case .negIntValue(let v)? = self.valueType else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }()
    case .boolValue?: try {
      guard case .boolValue(let v)? = self.valueType else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }()
    case .jsonValue?: try {
      guard case .jsonValue(let v)? = self.valueType else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage.Value, rhs: DataMessage.Value) -> Bool {
    if lhs.valueType != rhs.valueType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
